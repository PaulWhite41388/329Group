import tkinter as tk
from tkinter import messagebox
import time

# GPIO pin connected to the DHT sensor (change this to the actual pin)
DHT_SENSOR_PIN = 17

# Function to read temperature and humidity data from the DHT sensor
def read_dht_data():
    try:
        with open(f'/sys/class/gpio/gpio{DHT_SENSOR_PIN}/value', 'r') as f:
            data = f.read()
        return data
    except Exception as e:
        print(f"Error reading data from GPIO pin {DHT_SENSOR_PIN}: {e}")
        return None

# Simulated air resistance calculation
def calculate_air_resistance(speed):
    # Simulate air resistance calculation based on speed
    # You can use mathematical formulas or lookup tables for a more realistic calculation
    return 0.01 * speed ** 2  # Placeholder formula

# Simulated fan control
def control_fan_power(desired_temperature, current_temperature):
    # Simulate fan control based on temperature difference
    temperature_difference = desired_temperature - current_temperature
    if temperature_difference > 0:
        # If the room is warmer than desired, increase fan power
        fan_power = min(100, temperature_difference * 10)
    else:
        fan_power = 0  # Fan off when temperature is equal or cooler than desired
    return fan_power

# Function to display information in a pop-up window
def display_info(desired_temperature, current_temperature, current_speed, air_resistance, fan_power):
    msg = f"Desired Temperature: {desired_temperature}°C\n"
    msg += f"Current Temperature: {current_temperature}°C\n"
    msg += f"Current Speed: {current_speed} km/h\n"
    msg += f"Air Resistance: {air_resistance}\n"
    msg += f"Fan Power: {fan_power}%"

    root = tk.Tk()
    root.deiconify()  # Ensure the window is visible
    root.withdraw()  # Hide the main window
    messagebox.showinfo("Temperature Control Info", msg)
    root.destroy()

# Function to display fixed temperatures for each location
def get_temperature():
    location = location_var.get()
    if location:
        # Define fixed temperatures for each location
        fixed_temperatures = {
            'Sydney': 21,
            'Melbourne': 19,
            'Gold Coast': 23,
        }

        temperature = fixed_temperatures.get(location)

        if temperature is not None:
            temperature_label.config(text=f'Temperature in {location}: {temperature}°C')
        else:
            temperature_label.config(text='Invalid location')
    else:
        temperature_label.config(text='Please select a location')

# Create the main window
root = tk.Tk()
root.title("Weather App")

# Label for location dropdown menu
location_label = tk.Label(root, text="Select Location:")
location_label.pack()

# Dropdown menu for location
locations = ['Sydney', 'Melbourne', 'Gold Coast']
location_var = tk.StringVar(root)
location_var.set(locations[0])  # Set the default location
location_dropdown = tk.OptionMenu(root, location_var, *locations)
location_dropdown.pack()

# Button to fetch temperature
get_temperature_button = tk.Button(root, text="Get Temperature", command=get_temperature)
get_temperature_button.pack()

# Label to display temperature
temperature_label = tk.Label(root, text="")
temperature_label.pack()

# Main program
if __name__ == "__main__":
    # User's desired temperature setting (in Celsius)
    desired_temperature = 22.0

    # Read temperature data from the DHT sensor
    dht_data = read_dht_data()

    if dht_data is not None:
        # Temperature reading is successful
        # Continue with the rest of the code

        # Extract temperature and humidity values (simulated)
        current_temperature = float(dht_data)  # Change this line to parse the actual data

        # Simulated cycling speed in km/h
        current_speed = 20.0

        # Calculate air resistance (simulated)
        air_resistance = calculate_air_resistance(current_speed)

        # Control the fan based on temperature
        fan_power = control_fan_power(desired_temperature, current_temperature)

        # Display information in a pop-up window
        display_info(desired_temperature, current_temperature, current_speed, air_resistance, fan_power)
    else:
        print("Failed to read temperature data from the sensor.")

root.mainloop()
