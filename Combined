import tkinter as tk
from tkinter import Label, Button, Toplevel, Menu, messagebox
import random
import time
import board
import adafruit_dht
import gpiozero

# Create relay objects for GPIO 25 and GPIO 19
relay_25 = gpiozero.OutputDevice(25)
relay_19 = gpiozero.OutputDevice(19)

# Initialize the DHT22 temperature and humidity sensor
dhtDevice = adafruit_dht.DHT22(board.D4)

# Global variable to keep track of the main menu window
main_menu_window = None

# Global variable for location data label
location_data_label = None

# Initialize target temperature
target_temperature = 17.00

# Global variable for fan intensity
fan_intensity = 0

# Global variable for manual fan intensity
manual_fan_intensity = 0

# Replace with the MAC address and UUIDs of your cadence sensor
cadence_sensor_mac_address = "CA:02:5E:1F:54:63"
cadence_service_uuid = "00001816-0000-1000-8000-00805f9b34fb"
cadence_measurement_uuid = "00002a5b-0000-1000-8000-00805f9b34fb"

# Replace with the MAC address and UUIDs of your KICKR fan
kickr_fan_mac_address = "DE:AD:BE:EF:12:34"
kickr_fan_service_uuid = "00001802-0000-1000-8000-00805f9b34fb"
kickr_fan_control_uuid = "00002a06-0000-1000-8000-00805f9b34fb"

# Function to generate random temperature and wind speed readings
def generate_random_data():
    return round(random.uniform(15, 30), 1), round(random.uniform(0, 30), 1)

def read_target():
    try:
        return dhtDevice.temperature
    except RuntimeError as e:
        print(f"Error reading temperature: {e}")
        return None

# Simulated temperature sensor reading function
def read_temperature():
    try:
        return dhtDevice.temperature
    except RuntimeError as e:
        print(f"Error reading temperature: {e}")
        return None

# Function to update the target temperature label
def update_target_temperature_label():
    global target_temperature_label
    target_temperature_label.config(text=f"Target Temperature: {target_temperature:.2f}°C")

# Simulated wind speed reading function
def read_wind_speed(fan_intensity):
    return current_wind_speed(fan_intensity)

# Function to increase temperature (placeholder)
def increase_temperature():
    global target_temperature
    target_temperature += 0.10
    update_target_temperature_label()

# Function to decrease temperature (placeholder)
def decrease_temperature():
    global target_temperature
    target_temperature -= 0.10
    update_target_temperature_label()

# Function to set fan intensity based on the selected speed
def set_fan_intensity(speed):
    global fan_intensity
    fan_intensity = speed
    update_data()

    # Function to set manual fan intensity based on the selected speed
def set_manual_fan_intensity(speed):
    global manual_fan_intensity
    manual_fan_intensity = speed
    # Update the fan intensity label
    fan_intensity_label.config(text=f"Fan Intensity: {manual_fan_intensity}", fg="black")
    # Update the data
    update_data()

# Set a test value for currentCadence
currentCadence = 0  # You can change this value as needed

# Function to calculate fan intensity based on currentCadence
def calculate_fan_intensity(currentCadence):
    if currentCadence == 0:
        return 0  # Fan off
    elif currentCadence > 0 and currentCadence <= 20:
        return 1  # Level 1
    elif currentCadence > 20 and currentCadence <= 40:
        return 2  # Level 2
    elif currentCadence > 40 and currentCadence <= 60:
        return 3  # Level 3
    else:
        return 4  # Level 4

# Function to calculate current wind speed based on fan intensity
def current_wind_speed(fan_intensity):
    if fan_intensity == 0:
        return 0
    elif fan_intensity == 1:
        return 10
    elif fan_intensity == 2:
        return 25
    elif fan_intensity == 3:
        return 35
    elif fan_intensity == 4:
        return 40

# Function to refresh data
def refresh_data():
    current_temperature = read_temperature()
    fan_intensity = calculate_fan_intensity(currentCadence)
    current_wind_speed_value = read_wind_speed(fan_intensity)
    temperature_label.config(text=f"Temperature: {current_temperature:.1f}°C", fg=get_temperature_color(current_temperature))
    temperature_level_label.config(text=f"Temperature Level: {get_temperature_level(current_temperature)}", fg=get_temperature_color(current_temperature))
    fan_intensity_label.config(text=f"Fan Intensity: {fan_intensity}", fg="black")
    wind_label.config(text=f"Wind: {current_wind_speed_value:.1f} km/h", fg=get_wind_color(current_wind_speed_value))
    wind_level_label.config(text=f"Wind Level: {get_wind_level(current_wind_speed_value)}", fg=get_wind_color(current_wind_speed_value))

# Function to exit the application
def exit_app():
    confirmation = messagebox.askquestion("Exit", "Do you want to exit the Indoor cycling training program?")
    if confirmation == "yes":
        root.destroy()

# Modify the global variable to store the last valid temperature value
last_valid_temperature = None

# Function to update temperature and wind speed data
def update_data():
    global last_valid_temperature  # Access the global variable
    current_temperature = read_temperature()
    fan_intensity = calculate_fan_intensity(currentCadence)
    current_wind_speed_value = read_wind_speed(fan_intensity)

    # Check if the current_temperature is None (invalid reading)
    if current_temperature is not None:
        last_valid_temperature = current_temperature  # Update the last valid temperature

        # Control relays based on temperature conditions
        if current_temperature > target_temperature + 0.5:
            relay_25.on()  # Activate relay on GPIO 25
        else:
            relay_25.off()  # Deactivate relay on GPIO 25

        if current_temperature < target_temperature - 0.5:
            relay_19.on()  # Activate relay on GPIO 19
        else:
            relay_19.off()  # Deactivate relay on GPIO 19

    # Use the last valid temperature value or display "N/A" if no valid value is available
    temperature_label.config(text=f"Temperature: {last_valid_temperature:.1f}°C" if last_valid_temperature is not None else "Temperature: N/A", fg=get_temperature_color(last_valid_temperature))
    temperature_level_label.config(text=f"Temperature Level: {get_temperature_level(last_valid_temperature)}", fg=get_temperature_color(last_valid_temperature))
    fan_intensity_label.config(text=f"Fan Intensity: {fan_intensity}", fg="black")
    wind_label.config(text=f"Wind: {current_wind_speed_value:.1f} km/h", fg=get_wind_color(current_wind_speed_value))
    wind_level_label.config(text=f"Wind Level: {get_wind_level(current_wind_speed_value)}", fg=get_wind_color(current_wind_speed_value))

    root.after(5000, update_data)  # Auto update data every 5 seconds

# Add a function to determine the temperature level
def get_temperature_level(temperature):
    if temperature is None:
        return "N/A"
    elif temperature < 10:
        return "Low"
    elif 10 <= temperature <= 29:
        return "Medium"
    else:
        return "High"

# Add a function to determine the wind level
def get_wind_level(wind_speed):
    if wind_speed < 10:
        return "Low"
    elif 10 <= wind_speed <= 20:
        return "Medium"
    else:
        return "High"

# Add a function to get the text color based on temperature level
def get_temperature_color(temperature):
    if temperature is None:
        return "black"
    elif temperature < 10:
        return "blue"
    elif temperature > 29:
        return "red"
    else:
        return "black"

# Add a function to get the text color based on wind level
def get_wind_color(wind_speed):
    if wind_speed < 10:
        return "blue"
    elif wind_speed > 20:
        return "red"
    else:
        return "black"

# Function to open MANUAL MODE pop-up window
def manual_mode_window():
    global main_menu_window
    if main_menu_window:
        main_menu_window.destroy()
    manual_window = Toplevel(root)
    manual_window.title("Indoor cycling training program - MANUAL MODE")

    # Set the window size (adjust the values as needed)
    manual_window.geometry("500x500")

    # Generate random initial data
    target_temperature = read_target()
    current_temperature = read_temperature()

    welcome_label3 = Label(manual_window, text="MANUAL MODE", font=("Helvetica", 22))
    welcome_label3.pack(pady=10)  # Add some padding
    welcome_label4 = Label(manual_window, text="--------------------------------------", font=("Helvetica", 22))
    welcome_label4.pack(pady=10)  # Add some padding

    # Labels to display temperature and wind speed with the same font size as the main window
    global temperature_label  # Declare it as global
    temperature_label = Label(manual_window, text=f"Temperature: {current_temperature:.1f}°C", font=("Helvetica", 22), fg=get_temperature_color(current_temperature))
    temperature_label.pack()
    global temperature_level_label  # Declare it as global
    temperature_level_label = Label(manual_window, text=f"Temperature Level: {get_temperature_level(current_temperature)}", font=("Helvetica", 22), fg=get_temperature_color(current_temperature))
    temperature_level_label.pack()
    # Label for displaying target temperature
    global target_temperature_label
    target_temperature_label = Label(manual_window, text=f"Target Temperature: {target_temperature:.2f}°C", font=("Helvetica", 18))
    target_temperature_label.pack()
    global fan_intensity_label  # Declare it as global
    fan_intensity_label = Label(manual_window, text=f"Fan Intensity: 0", font=("Helvetica", 18), fg="black")
    fan_intensity_label.pack()
    # Label for displaying wind speed
    global wind_label  # Declare it as global
    wind_label = Label(manual_window, text="Wind: 0 km/h", font=("Helvetica", 22), fg="black")
    wind_label.pack()

    # Function to update the fan intensity label
    def update_fan_intensity_label(value):
        fan_intensity_label.config(text=f"Fan Intensity: {value}")

    # Buttons for fan speed control on one line
    fan_speed_frame = tk.Frame(manual_window)
    fan_speed_frame.pack()
    increase_button = Button(fan_speed_frame, text="+ Temperature", command=increase_temperature, bg="lightcoral", font=("Helvetica", 22))
    increase_button.pack(side="left")
    decrease_button = Button(fan_speed_frame, text="- Temperature", command=decrease_temperature, bg="lightblue", font=("Helvetica", 22))
    decrease_button.pack(side="left")

    # Buttons for fan speeds
    fan_speed_buttons = []
    for speed in range(5):
        button = Button(manual_window, text=f"Fan Speed {speed}", command=lambda s=speed: update_fan_intensity_label(s), bg="lightblue", font=("Helvetica", 18))
        button.pack()

    # Start updating data
    update_data()

# Function to open IMMERSIVE MODE pop-up window
def immersive_mode_window():
    global main_menu_window
    global location_data_label  # Ensure that you use the global variable

    if main_menu_window:
        main_menu_window.destroy()
    immersive_window = Toplevel(root)
    immersive_window.title("Indoor cycling training program - IMMERSIVE MODE")

    # Set the window size (adjust the values as needed)
    immersive_window.geometry("500x400")

    # Create a menu bar in the immersive mode window
    immersive_menu_bar = Menu(immersive_window)
    immersive_window.config(menu=immersive_menu_bar)

    # Function to return to the main menu from immersive mode window
    def return_to_main_menu():
        immersive_window.destroy()
        open_main_menu()

    # Add a "Return to Main Menu" button to the menu bar
    immersive_menu_bar.add_command(label="Return to the Main Menu", command=return_to_main_menu)

    # Menu Bar in Immersive Mode
    immersive_menu_bar.add_cascade(label="Refresh Data", command=refresh_data)
    immersive_menu_bar.add_cascade(label="Exit Program", command=exit_app)

    # Add a line of text
    instruction_label = Label(immersive_window, text="Select a location to view weather data:", font=("Helvetica", 20))
    instruction_label.pack()

    # Add buttons for selecting locations
    locations_frame = tk.Frame(immersive_window)
    locations_frame.pack(pady=20)

    new_york_button = Button(locations_frame, text="New York City", command=lambda: display_location_data("New York City"), font=("Helvetica", 16))
    new_york_button.pack(side="left", padx=20)

    melbourne_button = Button(locations_frame, text="Melbourne", command=lambda: display_location_data("Melbourne"), font=("Helvetica", 16))
    melbourne_button.pack(side="left", padx=20)

    sydney_button = Button(locations_frame, text="Sydney", command=lambda: display_location_data("Sydney"), font=("Helvetica", 16))
    sydney_button.pack(side="left", padx=20)

    # Label to display location data
    global location_data_label  # Declare it as global
    location_data_label = Label(immersive_window, text="", font=("Helvetica", 18))
    location_data_label.pack()

# Placeholder function for displaying location data
def display_location_data(location_name):
    global location_data_label  # Declare it as global to modify the outer variable
    
    if location_data_label is not None:  # Check if the label is properly initialized
        if location_name == "New York City":
            nyc_temp = 15.8
            target_temperature = 10.0
            current_temperature = read_temperature()
            wind_level = get_wind_level(read_wind_speed(calculate_fan_intensity(currentCadence)))

            location_data_label.config(
                text=f"Location: {location_name}\n"
                     f"New York City Temperature: {nyc_temp}°C\n"
                     f"Current Temperature: {current_temperature:.1f}°C\n"
                     f"Temperature Level: {get_temperature_level(current_temperature)}\n"
                     f"Fan Intensity: {calculate_fan_intensity(currentCadence)}\n"
                     f"Wind Level: {wind_level}"
            )
        if location_name == "Melbourne":
            melbourne_temp = 26.4
            # For other locations, fetch dynamic data
            current_temperature = read_temperature()
            wind_level = get_wind_level(read_wind_speed(calculate_fan_intensity(currentCadence)))

            location_data_label.config(
                text=f"Location: {location_name}\n"
                     f"Melbourne Temperature: {melbourne_temp}°C\n"
                     f"Current Temperature: {current_temperature:.1f}°C\n"
                     f"Temperature Level: {get_temperature_level(current_temperature)}\n"
                     f"Fan Intensity: {calculate_fan_intensity(currentCadence)}\n"
                     f"Wind Level: {wind_level}"
            )
        if location_name == "Sydney":
            sydney_temp = 21.2
            # For other locations, fetch dynamic data
            current_temperature = read_temperature()
            wind_level = get_wind_level(read_wind_speed(calculate_fan_intensity(currentCadence)))

            location_data_label.config(
                text=f"Location: {location_name}\n"
                     f"Sydney Temperature: {sydney_temp}°C\n"
                     f"Current Temperature: {current_temperature:.1f}°C\n"
                     f"Temperature Level: {get_temperature_level(current_temperature)}\n"
                     f"Fan Intensity: {calculate_fan_intensity(currentCadence)}\n"
                     f"Wind Level: {wind_level}"
            )
    else:
        print("Error: location_data_label is not properly initialized.")

# Function to open the main menu window
def open_main_menu():
    global main_menu_window
    if main_menu_window:
        main_menu_window.destroy()
    root.deiconify()  # Show the main menu window
    refresh_data()  # Refresh data when returning to the main menu

# Create the main application window
root = tk.Tk()
root.title("Indoor Cycling Training Program")
root.geometry("800x600")

# Function to fetch temperature based on location using an API

def get_temperature():

    location = location_var.get()

    if location:

        # Define API endpoints and keys for each location

        api_endpoints = {

    'Sydney': {

        'endpoint': 'https://api.weatherbit.io/v2.0/current?lat=-33.865143&lon=151.209900',

        'api_key': 'c293fe119570482c825be33566ccfdf6',  

    },

    'Melbourne': {

        'endpoint': 'https://api.weatherbit.io/v2.0/current?lat=-37.840935&lon=-144.946457',

        'api_key': 'c293fe119570482c825be33566ccfdf6',  

    },

    'Gold Coast': {

        'endpoint': 'https://api.weatherbit.io/v2.0/current?lat=-28.016666&lon=153.399994',

        'api_key': 'c293fe119570482c825be33566ccfdf6',  

    },

}

 

 

        # Get the API endpoint and key for the selected location

        selected_location = api_endpoints.get(location)

 

        if selected_location:

            api_key = selected_location['api_key']

            api_endpoint = selected_location['endpoint']

 

            # Construct the API request URL

            url = f'{api_endpoint}?key={api_key}&units=metric'  # Use metric units for Celsius

 

            try:

                response = requests.get(url)

                data = response.json()

                temperatures = data['main']['temp']

                temperature_label.config(text=f'Temperature in {location}: {temperatures}°C')

            except Exception as e:

                temperatures_label.config(text='Error fetching temperature')

        else:

            temperatures_label.config(text='Invalid location')

    else:

        temperatures_label.config(text='Please select a location')

# Labels to display temperature and wind speed
temperature_label = Label(root, text="Temperature: N/A", font=("Helvetica", 22), fg="black")
temperature_label.pack(pady=10)  # Add some padding
temperature_level_label = Label(root, text="Temperature Level: N/A", font=("Helvetica", 22), fg="black")
temperature_level_label.pack(pady=10)  # Add some padding
fan_intensity_label = Label(root, text="Fan Intensity: N/A", font=("Helvetica", 22), fg="black")
fan_intensity_label.pack(pady=10)  # Add some padding
wind_label = Label(root, text="Wind: N/A", font=("Helvetica", 22), fg="black")
wind_label.pack(pady=10)  # Add some padding
wind_level_label = Label(root, text="Wind Level: N/A", font=("Helvetica", 22), fg="black")
wind_level_label.pack(pady=10)  # Add some padding

# Button for MANUAL MODE
manual_mode_button = Button(root, text="MANUAL MODE", command=manual_mode_window, bg="lightgreen", font=("Helvetica", 22))
manual_mode_button.pack(side="left", padx=20)  # Adjust padx as needed

# Button for IMMERSIVE MODE
immersive_mode_button = Button(root, text="IMMERSIVE MODE", command=immersive_mode_window, bg="yellow", font=("Helvetica", 22))
immersive_mode_button.pack(side="left", padx=20)  # Adjust padx as needed

# Start updating data
update_data()

# Run the GUI
root.mainloop()
